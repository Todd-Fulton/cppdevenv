# syntax=docker/dockerfile:labs
FROM baseimg AS deps
RUN <<-EOF
  apt-get update
  DEBIAN_FRONTEND=noninteractive \
    apt-get install --yes g++ make gawk wget
  DEBIAN_FRONTEND=noninteractive \
    apt-get autoremove --yes &&
    apt-get autoclean --yes &&
    rm -rf /var/lib/apt/lists/*
EOF

FROM deps as binutils-source
RUN <<-EOF 
  # clone binutils source code
  git clone --branch master --single-branch  \
      git://sourceware.org/git/binutils-gdb.git /binutils-gdb-source
EOF

FROM binutils-source AS binutils-build
ARG cpu_threads=4
ARG target_triplet
ARG binutils_commit
ARG binutils_extra_config

RUN <<-EOF
  # update apt pkgs
  apt-get update
  DEBIAN_FRONTEND=noninteractive \
    apt-get full-upgrade --yes && \
    apt-get autoremove --yes && \
    apt-get autoclean --yes && \
    rm -rf /var/lib/apt/lists/*
  
  # update binutils source, use proper commit
  cd /binutils-gdb-source
  git pull
  git checkout ${binutils_commit}

  # build and install binutils
  mkdir -p /opt/${target_triplet}
  mkdir -p /binutils-build
  
  cd /binutils-build
  /binutils-gdb-git/configure \
    --prefix=/opt/${target_triplet} \
    --with-sysroot=/opt/${target_triplet}/${target_triplet} \
    --target=${target_triplet} \
    --disable-werror ${binutils_extra_config}
  
  make -j${cpu_threads}
  make install
  
  cd /
  rm -rf /binutils-gdb-source
  rm -rf /binutils-build
EOF

# fetch kernel src install headers
FROM deps AS kernel-headers
ARG kernel_version
ARG kernel_arch
ARG target_triplet
RUN <<-EOF
  mkdir -p /opt/${target_triplet}/${target_triplet}
  wget https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-${kernel_version}.tar.gz -O - | tar xzf -
  cd linux-${kernel_version}
  make ARCH=${kernel_arch} \
      INSTALL_HDR_PATH=/opt/${target_triplet}/${target_triplet}/usr \
      headers_install
  cd /
  rm -rf /linux-${kernel_version}*
EOF

# glibc headers
FROM glibc-source AS glibc-headers
ARG glibc_commit
ARG target_triplet

RUN <<-EOF
  # checkout glibc_commit
  cd /glibc-source
  git pull
  git checkout ${glibc_commit}

  # install glibc headers
  mkdir /glibc-build
  cd /glibc-build
  export PATH=/opt/${target_triplet}/bin:$PATH
  SYSROOT=/opt/${target_triplet}/${target_triplet}
  /glibc-source/configure \
      --host=${target_triplet} \
      --target=${target_triplet} \
      --build=$MACHTYPE \
      --prefix=$SYSROOT \
      --includedir=$SYSROOT/usr/include \
      --with-headers=$SYSROOT/usr/include ${glibc_extra_config}
  
  make -k install-bootstrap-headers=yes install-headers
  
  # glibc needs some manual labor
  mkdir -p $SYSROOT/usr/include/gnu
  touch $SYSROOT/usr/include/gnu/stub.h
  cp bits/stdio_lib.h $SYSROOT/usr/include/bits/
  cd /  
EOF

# clone gcc repo
FROM deps AS gcc-source
ARG gmp_version=6.2.1
ARG mpfr_version=4.1.0
ARG mpc_version=1.2.1
ARG isl_version=0.25

RUN <<-
  # dependencies for gcc
  DEBIAN_FRONTEND=noninteractive \
    apt-get install --yes \
        m4 flex bison build-essential file make g++ \
        libzstd-dev

  # clone gcc source code
  git clone --branch master --single-branch git://gcc.gnu.org/git/gcc.git /gcc-source
  
  cd /
  # use release archives of dependencies
  wget https://gnu.mirror.constant.com/gmp/gmp-${gmp_version}.tar.xz -O - | tar xvJf -
  wget https://gnu.mirror.constant.com/mpfr/mpfr-${mpfr_version}.tar.xz -O - | tar xvJf -
  wget https://gnu.mirror.constant.com/mpc/mpc-${mpc_version}.tar.gz -O - | tar xvzf -
  wget https://libisl.sourceforge.io/isl-${isl_version}.tar.xz -O - | tar xvJf -
  
  cd /gcc-source
  ln -s /gmp-${gmp_version} gmp
  ln -s /mpfr-${mpfr_version} mpfr
  ln -s /mpc-${mpc_version} mpc
  ln -s /isl-${isl_version} isl
  cd /
EOF

# build stage 1 gcc
FROM gcc-source AS gcc-build-stage1
ARG target_triplet

COPY --from=binutils /opt/${target_triplet} /opt
COPY --from=kernel-headers /opt/${target_triplet} /opt
COPY --from=glibc-headers /opt/${target_triplet} /opt

# gcc_commit after COPY to allow caching those layers
ARG gcc_commit
ARG cpu_threads

RUN <<-EOF
  cd /gcc-source
  git pull
  git checkout ${gcc_commit}
  
  mkdir -p /gcc-build
  cd /gcc-build
  export PATH=/opt/${target_triplet}/bin
  SYSROOT=/opt/${target_triplet}/${target_triplet}
  /gcc-source/configure \
      --target=${target_triplet} \
      --prefix=/opt/${target_triplet} \
      --with-sysroot=$SYSROOT \
      --with-headers=$SYSROOT/usr/include \
      --enable-languages=c,c++ \
      --enable-lto \
      --disable-werror \
      ${gcc_extra_config}

  make -j${cpu_threads} all-gcc
  make install-gcc
  cd /
EOF

# glibc source
FROM deps AS glibc-source
RUN <<-EOF
  git clone https://sourceware.org/git/glibc.git /glibc-source
EOF

FROM glibc-headers AS glibc-build
ARG target_triplet
ARG cpu_threads=4

COPY --from gcc-build-stage1 /opt/${target_triplet} /opt
# TODO: make sure the start files are correct for different architectures
RUN <<-EOF
  export PATH=/opt/${target_triplet}/bin:$PATH
  cd /glibc-build
  make -j${cpu_threads} csu/subdir_lib
  install csu/crt1.o csu/crti.o csu/crtn.o /opt/${target_triplet}/${target_triplet}/lib
  ${target_triplet}-gcc \
        -nostdlib \
        -nostartfiles \
        -shared \
        -x c /dev/null \
        -o /opt/${target_triplet}/lib/libc.so
EOF


# TODO: make libgcc

# TODO: finish glibc

# TODO: finish gcc toolchain

